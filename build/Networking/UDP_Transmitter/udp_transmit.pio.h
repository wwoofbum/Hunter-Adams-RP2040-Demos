// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------- //
// manchester_tx //
// ------------- //

#define manchester_tx_wrap_target 0
#define manchester_tx_wrap 6
#define manchester_tx_pio_version 0

#define manchester_tx_offset_start 4u

static const uint16_t manchester_tx_program_instructions[] = {
            //     .wrap_target
    0xb742, //  0: nop                    side 1 [3]
    0x1804, //  1: jmp    4               side 2
    0xbb42, //  2: nop                    side 2 [3]
    0xb442, //  3: nop                    side 1
    0x6021, //  4: out    x, 1
    0x2040, //  5: wait   0 irq, 0
    0x0022, //  6: jmp    !x, 2
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program manchester_tx_program = {
    .instructions = manchester_tx_program_instructions,
    .length = 7,
    .origin = -1,
    .pio_version = manchester_tx_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config manchester_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + manchester_tx_wrap_target, offset + manchester_tx_wrap);
    sm_config_set_sideset(&c, 3, true, false);
    return c;
}

static inline void manchester_tx_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    // Default configs
    pio_sm_config c = manchester_tx_program_get_default_config(offset);
    // Map the base sideset pin
    sm_config_set_sideset_pins(&c, pin);
    // Autopull threshold to 8
    sm_config_set_out_shift(&c, true, true, 8);
    // Clock div
    sm_config_set_clkdiv(&c, div);
    // Set GPIO function to gpio
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+1);
    // Initialize pins as logically low
    pio_sm_set_pins_with_mask(pio, sm, 0, (1u << (pin+1)));
    pio_sm_set_pins_with_mask(pio, sm, 1, (1u << (pin)));
    // Set pindirs as output
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, true);
    // Load configuration, jump to start of program (plus offset)
    pio_sm_init(pio, sm, offset + manchester_tx_offset_start, &c);
    // Don't enable yet
    pio_sm_set_enabled(pio, sm, false);
}

#endif

// ------ //
// tp_idl //
// ------ //

#define tp_idl_wrap_target 0
#define tp_idl_wrap 19
#define tp_idl_pio_version 0

static const uint16_t tp_idl_program_instructions[] = {
            //     .wrap_target
    0x6020, //  0: out    x, 32
    0x0041, //  1: jmp    x--, 1
    0xf702, //  2: set    pins, 2                [23]
    0xff00, //  3: set    pins, 0                [31]
    0xff00, //  4: set    pins, 0                [31]
    0xff00, //  5: set    pins, 0                [31]
    0xff00, //  6: set    pins, 0                [31]
    0xff00, //  7: set    pins, 0                [31]
    0xff00, //  8: set    pins, 0                [31]
    0xff00, //  9: set    pins, 0                [31]
    0xff00, // 10: set    pins, 0                [31]
    0xff00, // 11: set    pins, 0                [31]
    0xff00, // 12: set    pins, 0                [31]
    0xff00, // 13: set    pins, 0                [31]
    0xff00, // 14: set    pins, 0                [31]
    0xff00, // 15: set    pins, 0                [31]
    0xff00, // 16: set    pins, 0                [31]
    0xff00, // 17: set    pins, 0                [31]
    0xff00, // 18: set    pins, 0                [31]
    0xc001, // 19: irq    nowait 1
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program tp_idl_program = {
    .instructions = tp_idl_program_instructions,
    .length = 20,
    .origin = -1,
    .pio_version = tp_idl_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config tp_idl_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + tp_idl_wrap_target, offset + tp_idl_wrap);
    return c;
}

static inline void tp_idl_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    // Default configs
    pio_sm_config c = tp_idl_program_get_default_config(offset);
    // Map the set pins ("pin" is lowest, final argument is number to map)
    sm_config_set_set_pins(&c, pin, 2);
    // Autopull threshold to 32
    sm_config_set_out_shift(&c, true, true, 32);
    // Clock div
    sm_config_set_clkdiv(&c, div);
    // Set GPIO function to gpio
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+1);
    // Set pindirs as output
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, true);
    // Load configuration, jump to start of program (plus offset)
    pio_sm_init(pio, sm, offset, &c);
    // Don't enable yet
    pio_sm_set_enabled(pio, sm, false);
}

#endif

// --- //
// nlp //
// --- //

#define nlp_wrap_target 0
#define nlp_wrap 4
#define nlp_pio_version 0

static const uint16_t nlp_program_instructions[] = {
            //     .wrap_target
    0x6020, //  0: out    x, 32
    0xc000, //  1: irq    nowait 0
    0xe502, //  2: set    pins, 2                [5]
    0xe500, //  3: set    pins, 0                [5]
    0xc040, //  4: irq    clear 0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program nlp_program = {
    .instructions = nlp_program_instructions,
    .length = 5,
    .origin = -1,
    .pio_version = nlp_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config nlp_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + nlp_wrap_target, offset + nlp_wrap);
    return c;
}

static inline void nlp_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    // Default configs
    pio_sm_config c = nlp_program_get_default_config(offset);
    // Map the set pins ("pin" is lowest, final argument is number to map)
    sm_config_set_set_pins(&c, pin, 2);
    // Autopull threshold to 32
    sm_config_set_out_shift(&c, true, true, 32);
    // Clock div
    sm_config_set_clkdiv(&c, div);
    // Set GPIO function to gpio
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+1);
    // Set pindirs as output
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, true);
    // Load configuration, jump to start of program (plus offset)
    pio_sm_init(pio, sm, offset, &c);
    // Don't enable yet
    pio_sm_set_enabled(pio, sm, false);
}

#endif

