// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------- //
// idle_check //
// ---------- //

#define idle_check_wrap_target 0
#define idle_check_wrap 5
#define idle_check_pio_version 0

static const uint16_t idle_check_program_instructions[] = {
            //     .wrap_target
    0x20c1, //  0: wait   1 irq, 1
    0x6020, //  1: out    x, 32
    0x00c4, //  2: jmp    pin, 4
    0x6020, //  3: out    x, 32
    0x1e42, //  4: jmp    x--, 2                 [30]
    0xc022, //  5: irq    wait 2
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program idle_check_program = {
    .instructions = idle_check_program_instructions,
    .length = 6,
    .origin = -1,
    .pio_version = idle_check_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config idle_check_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + idle_check_wrap_target, offset + idle_check_wrap);
    return c;
}

static inline void idle_check_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    // Default configs
    pio_sm_config c = idle_check_program_get_default_config(offset);
    // Map the jmp pin
    sm_config_set_jmp_pin(&c, pin) ;
    // (pointer to sm config, shift right, autopull off, threshold set to 32 bits)
    sm_config_set_out_shift(&c, true, true, 32);
    // Clock div
    sm_config_set_clkdiv(&c, div);
    // Set GPIO function to gpio (out pin, and jmp input pin)
    pio_gpio_init(pio, pin);
    // Set pindirs
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    // Load configuration, jump to start of program (plus offset)
    pio_sm_init(pio, sm, offset, &c);
    // Don't enable yet
    pio_sm_set_enabled(pio, sm, false);
}

#endif

// ------ //
// can_tx //
// ------ //

#define can_tx_wrap_target 0
#define can_tx_wrap 25
#define can_tx_pio_version 0

static const uint16_t can_tx_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block
    0xa047, //  1: mov    y, osr
    0xa0e2, //  2: mov    osr, y
    0xe020, //  3: set    x, 0
    0xc021, //  4: irq    wait 1
    0x20c2, //  5: wait   1 irq, 2
    0x00cb, //  6: jmp    pin, 11
    0x0004, //  7: jmp    4
    0x00ce, //  8: jmp    pin, 14
    0x0002, //  9: jmp    2
    0x6521, // 10: out    x, 1                   [5]
    0xa001, // 11: mov    pins, x
    0x1648, // 12: jmp    x--, 8                 [22]
    0xa042, // 13: nop
    0x00ea, // 14: jmp    !osre, 10
    0xe24f, // 15: set    y, 15                  [2]
    0x81a0, // 16: pull   block                  [1]
    0x6021, // 17: out    x, 1
    0xa001, // 18: mov    pins, x
    0x1858, // 19: jmp    x--, 24                [24]
    0xe04f, // 20: set    y, 15
    0x00f7, // 21: jmp    !osre, 23
    0x0010, // 22: jmp    16
    0x0211, // 23: jmp    17                     [2]
    0x0095, // 24: jmp    y--, 21
    0xc020, // 25: irq    wait 0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program can_tx_program = {
    .instructions = can_tx_program_instructions,
    .length = 26,
    .origin = -1,
    .pio_version = can_tx_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config can_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + can_tx_wrap_target, offset + can_tx_wrap);
    return c;
}

static inline void can_tx_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    // Default configs
    pio_sm_config c = can_tx_program_get_default_config(offset);
    // Map the base out (mov) pin and the jmp pin
    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_jmp_pin(&c, pin+1) ;
    // (pointer to sm config, shift left, autopull off, threshold set to 16 bits)
    sm_config_set_out_shift(&c, false, false, 16);
    // Clock div
    sm_config_set_clkdiv(&c, div);
    // Set GPIO function to gpio (out pin, and jmp input pin)
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+1);
    // Set pindirs
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, pin+1, 1, false);
    // Initialize output pin as logically high
    pio_sm_set_pins(pio, sm, 0x40) ;
    // Load configuration, jump to start of program (plus offset)
    pio_sm_init(pio, sm, offset, &c);
    // Don't enable yet
    pio_sm_set_enabled(pio, sm, false);
}

#endif

// ------ //
// can_rx //
// ------ //

#define can_rx_wrap_target 0
#define can_rx_wrap 25
#define can_rx_pio_version 0

static const uint16_t can_rx_program_instructions[] = {
            //     .wrap_target
    0xe027, //  0: set    x, 7
    0x00c3, //  1: jmp    pin, 3
    0xe027, //  2: set    x, 7
    0x1e41, //  3: jmp    x--, 1                 [30]
    0x00c4, //  4: jmp    pin, 4
    0xb442, //  5: nop                           [20]
    0x01c0, //  6: jmp    pin, 0                 [1]
    0x0015, //  7: jmp    21
    0xe043, //  8: set    y, 3
    0x004d, //  9: jmp    x--, 13
    0x8020, // 10: push   block
    0xc020, // 11: irq    wait 0
    0x0000, // 12: jmp    0
    0x00cf, // 13: jmp    pin, 15
    0x0012, // 14: jmp    18
    0x008d, // 15: jmp    y--, 13
    0x1313, // 16: jmp    19                     [19]
    0xa042, // 17: nop
    0xb442, // 18: nop                           [20]
    0x4001, // 19: in     pins, 1
    0x00c8, // 20: jmp    pin, 8
    0xe02f, // 21: set    x, 15
    0xe043, // 22: set    y, 3
    0x00d1, // 23: jmp    pin, 17
    0x0097, // 24: jmp    y--, 23
    0x1313, // 25: jmp    19                     [19]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program can_rx_program = {
    .instructions = can_rx_program_instructions,
    .length = 26,
    .origin = -1,
    .pio_version = can_rx_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config can_rx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + can_rx_wrap_target, offset + can_rx_wrap);
    return c;
}

static inline void can_rx_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    // Default configs
    pio_sm_config c = can_rx_program_get_default_config(offset);
    // Map the base out (mov) pin and the jmp pin
    sm_config_set_in_pins(&c, pin);
    sm_config_set_jmp_pin(&c, pin) ;
    // (pointer to sm config, shift left, autopush on, threshold set to 8 bits)
    sm_config_set_in_shift(&c, false, true, 8);
    // Clock div
    sm_config_set_clkdiv(&c, div);
    // Set GPIO function to gpio (out pin, and jmp input pin)
    pio_gpio_init(pio, pin);
    // Set pindirs
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    // Load configuration, jump to start of program
    pio_sm_init(pio, sm, offset, &c);
    // Don't enable yet
    pio_sm_set_enabled(pio, sm, false);
}

#endif

